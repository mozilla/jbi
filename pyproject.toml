[tool.poetry]
name = "jira-bugzilla-integration"
version = "2.0.1"
description = "jira-bugzilla-integration"
authors = ["@mozilla/jbi-core"]
license = "MPL"

[tool.poetry.dependencies]
python = ">=3.8, <3.11"
fastapi = "^0.73.0"
pydantic = {version = "^1.9.1", extras = ["email"]}
uvicorn = {extras = ["standard"], version = "^0.17.4"}
gunicorn = "^20.1.0"
prometheus-client = "^0.13.1"
python-bugzilla = "^3.2.0"
atlassian-python-api = "^3.20.1"
dockerflow = "2022.1.0"
Jinja2 = "^3.0.3"
pydantic-yaml = {extras = ["pyyaml","ruamel"], version = "^0.6.1"}
sentry-sdk = "^1.5.7"
orjson = "^3.7.7"


[tool.poetry.dev-dependencies]
pre-commit = "^2.17.0"
black = "^22.1.0"
isort = "^5.10.1"
coverage = {extras = ["toml"], version = "^5.3"}
mypy = "^0.910"
detect-secrets = "^1.2.0"
bandit = "^1.7.0"
pylint = "^2.7.2"
pylint-pytest = "^1.1.2"
pytest = "^7.0.0"
yamllint = "^1.26.3"
pytest-dotenv = "^0.5.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = [
    "tests/unit",
]
env_override_existing_values = true
env_files = [
    "config/local_dev.env"
]

[tool.pylint]
    [tool.pylint.'MESSAGES CONTROL']
    disable = [
        "C0301", #line-too-long
        "R0903", #too-few-public-methods
        "W0613", #unused-argument
    ]
    [tool.pylint.REPORTS]
    output-format = 'colorized'
    [tool.pylint.MASTER]
    load-plugins='pylint_pytest'
    ignore='third_party'
    ignore-patterns = "tests/*"
    extension-pkg-whitelist = "pydantic"
    [tool.pylint.SIMILARITIES]
    ignore-signatures = "yes"

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.9"
# Warn when returning Any from function with non-Any return
warn_return_any = true

[[tool.mypy.overrides]]
module = ["ruamel"]
ignore_missing_imports = true

[tool.coverage]
# https://github.com/nedbat/coveragepy
    [tool.coverage.run]
    omit = [
        '*/.local/*',
        '/usr/*',
        '*/.venv/*',
        '*/.tox/*',
        '*/virtualenvs/*',
    ]

    [tool.coverage.report]

    exclude_lines = [
        "# noqa",
        "raise NotImplementedError",
        "pragma: no cover",
        "def __repr__",
        "if .debug:",
        "raise NotImplementedError",
        "if __name__ == .__main__.:",
        "logger.",
        "from",
        "import"
    ]
